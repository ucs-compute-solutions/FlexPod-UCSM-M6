---
# Create Management Broadcast Domain
- name: Create Management Broadcast Domain
  netapp.ontap.na_ontap_broadcast_domain:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.name}}"
    mtu: 1500
    https: true
    validate_certs: false
  with_items:
    - "{{ib_mgmt_vlan_list}}"
  tags:
    - ontap_mgmt_broadcast_domain
    
# Create iSCSI broadcast domain ports with Jumbo frames
- name: Create iSCSI broadcast domain ports with Jumbo frames
  netapp.ontap.na_ontap_broadcast_domain:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.name}}"
    mtu: 9000
    https: true
    validate_certs: false
  with_items:
    - "{{storage_vlan_list}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - item.storage_protocol == "iSCSI"
  tags:
    - ontap_iscsi_broadcast_domains

# Create NFS broadcast domain ports with Jumbo frames
- name: Create NFS broadcast domain ports with Jumbo frames
  netapp.ontap.na_ontap_broadcast_domain:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.name}}"
    mtu: 9000
    https: true
    validate_certs: false
  with_items:
    - "{{storage_vlan_list}}"
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
    - item.storage_protocol == "NFS"
  tags:
    - ontap_nfs_broadcast_domain

# Create ifgroups for the 10G interfaces
- name: Create multimode/ LACP interface groups and add data ports
  netapp.ontap.na_ontap_net_ifgrp:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    mode: "{{ifgrp_mode}}"
    distribution_function: port
    name: "{{ifgrp_name}}"
    node: "{{item.1.node_name}}"
    port: "{{item.0.node_data_ports}}"
    https: true
    validate_certs: false
  with_subelements:
    - "{{ ha_pairs }}"
    - node_specs
  failed_when: ifgrp_mode == None or item.0.node_data_ports == []
  tags:
    - ontap_configure_ifgrp

# Modify the MTU of the data ifgroup to 9000
- name: Modify the MTU of the data ifgroup to 9000
  netapp.ontap.na_ontap_net_port:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    node: "{{item.node_name}}"
    port: "{{ifgrp_name}}"
    mtu: 9000
    https: true
    validate_certs: false
  with_items:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
  failed_when: item.node_name == None or item.node_name == ""
  tags:
    - ontap_ifgroup_mtu

# Create iSCSI vlans
- name: Create the iSCSI vlans
  netapp.ontap.na_ontap_net_vlan:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: "{{item.1.state}}"
    parent_interface: "{{item.2}}"
    vlanid: "{{item.1.id}}"
    node: "{{item.0.node_name}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  failed_when: item.1.state != "present"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "iSCSI"
  tags:
    - ontap_vlan_interface

# Create NFS vlans
- name: Create the NFS vlans
  netapp.ontap.na_ontap_net_vlan:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: "{{item.1.state}}"
    parent_interface: "{{item.2}}"
    vlanid: "{{item.1.id}}"
    node: "{{item.0.node_name}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  failed_when: item.1.state != "present"
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "NFS"
  tags:
    - ontap_vlan_interface

# Add the iSCSI vlans to the correponding broadcast domains
- name: Adding iSCSI-A, iSCSI-B vlans to the corresponding broadcast domains
  netapp.ontap.na_ontap_broadcast_domain_ports:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.1.name}}"
    ports: "{{item.0.node_name}}:{{item.2}}-{{item.1.id}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "iSCSI"
  tags:
    - ontap_vlan_interface

# Add the NFS vlans to the correponding broadcast domains
- name: Adding NFS vlans to the corresponding broadcast domains
  netapp.ontap.na_ontap_broadcast_domain_ports:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.1.name}}"
    ports: "{{item.0.node_name}}:{{item.2}}-{{item.1.id}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "NFS"
  tags:
    - ontap_vlan_interface

# Create management vlan interface
- name: Create the management vlan interface
  netapp.ontap.na_ontap_net_vlan:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: "{{item.1.state}}"
    parent_interface: "{{item.2}}"
    vlanid: "{{item.1.id}}"
    node: "{{item.0.node_name}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{ib_mgmt_vlan_list}}"
    - "{{ifgrp_name}}"
  failed_when: item.1.state != "present"
  tags:
    - ontap_vlan_interface

# Add the mgmt vlan to the management broadcast domain
- name: Adding management vlan to the management broadcast domain
  netapp.ontap.na_ontap_broadcast_domain_ports:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.1.name}}"
    ports: "{{item.0.node_name}}:{{item.2}}-{{item.1.id}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{ib_mgmt_vlan_list}}"
    - "{{ifgrp_name}}"
  tags:
    - ontap_vlan_interface
